"use strict";

var _require = require('lodash'),
    upperFirst = _require.upperFirst;

var logSymbols = require('log-symbols');

var generateHelpUrl = require('@sanity/generate-help-url'); // eslint-disable-next-line no-console


var consoleOutputter = {
  error: function error() {
    return console.error(...arguments);
  }
};
module.exports = class SchemaError extends Error {
  constructor(problemGroups) {
    super('Schema errors encountered');
    this.problemGroups = problemGroups;
  }

  print(output) {
    var logger = output || consoleOutputter;
    logger.error('Uh ohâ€¦ found errors in schema:\n');
    this.problemGroups.forEach(group => {
      group.problems.forEach(problem => {
        var icon = logSymbols[problem.severity] || logSymbols.info;
        output.error(`  ${icon} ${upperFirst(problem.severity)}: ${getPath(group.path)}`);
        output.error(`  ${problem.message}`);

        if (problem.helpId) {
          output.error(`  See ${generateHelpUrl(problem.helpId)}`);
        }

        output.error('');
      });
    });
  }

};

function getPath(path) {
  return path.map(segment => {
    if (segment.kind === 'type' && segment.name && segment.type) {
      return `${segment.name} - (${segment.type})`;
    }

    if (segment.kind === 'property' && segment.name) {
      return segment.name;
    }

    return null;
  }).filter(Boolean).join(' / ');
}