"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildEditorSchema;

var _blockTools = require("@sanity/block-tools");

var _deserialize = _interopRequireDefault(require("./deserialize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildEditorSchema(blockContentFeatures) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withNormalization: true
  };
  var blocks = {
    __unknown: {
      isVoid: true
    }
  };
  blockContentFeatures.types.blockObjects.forEach(type => {
    blocks[type.name] = {
      isVoid: true
    };
  });
  var inlines = {};
  blockContentFeatures.types.inlineObjects.forEach(type => {
    inlines[type.name] = {
      isVoid: true
    };
  });

  function createEmptyBlock() {
    var key = (0, _blockTools.randomKey)(12);
    return (0, _deserialize.default)([(0, _blockTools.normalizeBlock)({
      _key: key,
      _type: 'block',
      children: [{
        _type: 'span',
        _key: `${key}0`,
        text: '',
        marks: []
      }],
      style: 'normal'
    })], blockContentFeatures.types.block).document.nodes.first();
  }

  return {
    blocks,
    inlines,
    document: options.withNormalization ? {
      nodes: [{
        match: {
          object: 'block'
        },
        min: 1
      }],
      normalize: (editor, _ref) => {
        var code = _ref.code,
            node = _ref.node,
            child = _ref.child;

        if (code === 'child_min_invalid') {
          var block = createEmptyBlock();
          editor.applyOperation({
            type: 'insert_node',
            path: [0],
            node: block.toJSON({
              preserveKeys: true,
              preserveData: true
            })
          });
        }
      }
    } : {}
  };
}